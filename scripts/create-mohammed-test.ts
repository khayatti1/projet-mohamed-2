import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createMohammedTest() {
  try {
    console.log('üöÄ Cr√©ation du test pour Mohammed...');

    // Trouver Mohammed
    const mohammed = await prisma.user.findFirst({
      where: {
        email: 'mohammed.khayati@example.com'
      }
    });

    if (!mohammed) {
      console.error('‚ùå Mohammed non trouv√©');
      return;
    }

    // Trouver l'offre d'ing√©nieur informatique
    const jobOffer = await prisma.jobOffer.findFirst({
      where: {
        title: {
          contains: 'Ing√©nieur'
        }
      }
    });

    if (!jobOffer) {
      console.error('‚ùå Offre d\'emploi non trouv√©e');
      return;
    }

    // Cr√©er ou trouver la candidature
    let application = await prisma.application.findFirst({
      where: {
        candidateId: mohammed.id,
        jobOfferId: jobOffer.id
      }
    });

    if (!application) {
      application = await prisma.application.create({
        data: {
          candidateId: mohammed.id,
          jobOfferId: jobOffer.id,
          status: 'TEST_PENDING',
          aiScore: 85,
          aiAnalysis: 'Excellent profil technique correspondant au poste'
        }
      });
    }

    // Cr√©er le test technique avec des questions r√©alistes
    const questions = [
      {
        question: "Qu'est-ce que JavaScript?",
        options: ["Un langage de programmation", "Une base de donn√©es", "Un serveur web", "Un syst√®me d'exploitation"],
        correctAnswer: 0
      },
      {
        question: "Quelle est la diff√©rence entre '==' et '===' en JavaScript?",
        options: ["Aucune diff√©rence", "=== compare type et valeur", "== est plus rapide", "=== est obsol√®te"],
        correctAnswer: 1
      },
      {
        question: "Qu'est-ce que CSS?",
        options: ["Un langage de programmation", "Un langage de style", "Une base de donn√©es", "Un framework"],
        correctAnswer: 1
      },
      {
        question: "Que signifie API?",
        options: ["Application Programming Interface", "Advanced Programming Interface", "Automated Program Interface", "Application Process Interface"],
        correctAnswer: 0
      },
      {
        question: "Qu'est-ce que Git?",
        options: ["Un √©diteur de texte", "Un syst√®me de contr√¥le de version", "Un langage de programmation", "Une base de donn√©es"],
        correctAnswer: 1
      },
      {
        question: "Quelle est la fonction principale d'une base de donn√©es SQL?",
        options: ["Stocker des donn√©es structur√©es", "Cr√©er des interfaces utilisateur", "G√©rer le r√©seau", "Compiler du code"],
        correctAnswer: 0
      },
      {
        question: "Qu'est-ce qu'un algorithme?",
        options: ["Un langage de programmation", "Une suite d'instructions pour r√©soudre un probl√®me", "Un type de base de donn√©es", "Un composant mat√©riel"],
        correctAnswer: 1
      },
      {
        question: "Quel est le r√¥le principal d'un syst√®me d'exploitation?",
        options: ["Cr√©er des sites web", "G√©rer les ressources mat√©rielles et logicielles", "Programmer des applications", "Stocker des donn√©es"],
        correctAnswer: 1
      },
      {
        question: "Qu'est-ce qu'un framework en d√©veloppement logiciel?",
        options: ["Un langage de programmation", "Une structure de base pour d√©velopper des applications", "Un type de serveur", "Un syst√®me d'exploitation"],
        correctAnswer: 1
      },
      {
        question: "Qu'est-ce que le cloud computing?",
        options: ["L'utilisation de services informatiques via internet", "La programmation en r√©seau", "La cr√©ation de sites web", "L'analyse de donn√©es locales"],
        correctAnswer: 0
      }
    ];

    // V√©rifier si le test existe d√©j√†
    const existingTest = await prisma.technicalTest.findFirst({
      where: {
        applicationId: application.id
      }
    });

    if (!existingTest) {
      await prisma.technicalTest.create({
        data: {
          applicationId: application.id,
          userId: mohammed.id,
          questions: JSON.stringify(questions)
        }
      });
    }

    console.log('‚úÖ Test cr√©√© avec succ√®s pour Mohammed');
    console.log(`üìù Application ID: ${application.id}`);
    console.log(`üéØ Job Offer: ${jobOffer.title}`);
    console.log(`üë§ Candidat: ${mohammed.name}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createMohammedTest();
